# Makefile to build and run the examples using KLEE.
#
# Copyright 2015-2017 National University of Singapore
#
# Environment variables that can be set externally include:
#
# EXTRA_OPTIONS   - Extra KLEE options
# PROGRAM_OPTIONS - Extra options for the tested program, e.g.,
#                   --sym-arg
# EXTRA_CFLAGS    - Extra CFLAGS options
# EXTRA_LDFLAGS   - Extra LDFLAGS options

# Extra executable path to include. This is used for building
# coreutils 6.10 as older utilites may be needed, such as Texinfo 4.13.
EXTRA_PATH=@EXTRA_PATH@

# Extra libraries that may be needed for running KLEE to be added to
# LD_LIBRARY_PATH environment variable, e.g., the path of libz3.so
EXTRA_LD_LIBRARY_PATH=@EXTRA_LD_LIBRARY_PATH@:@LLVM_LIBDIR@

# Where KLEE resides in the system
KLEE_HOME=@KLEE@

# Where whole-program-llvm resides in the system
WHOLE_PROGRAM_LLVM=@WLLVM@

# In the following, please select where klee and its various tools are
# located in your system
KLEE=${KLEE_HOME}/bin/klee
KLEE_STATS=${KLEE_HOME}/bin/klee-stats
KLEE_REPLAY=${KLEE_HOME}/bin/klee-replay
KTEST_TOOL=${KLEE_HOME}/bin/ktest-tool

# We use -only-output-states-covering-new to save disk space
KLEE_FLAGS=${EXTRA_OPTIONS} -only-output-states-covering-new -search=dfs

# klee-replay timeout
DEFAULT_KLEE_REPLAY_TIMEOUT=@KLEE_REPLAY_TIMEOUT@

# In the following, please select suitable include and DLL directories
CFLAGS=-g -I${KLEE_HOME}/include -I${KLEE_HOME}/../include ${EXTRA_CFLAGS}
LDFLAGS=-L${KLEE_HOME}/lib ${EXTRA_LDFLAGS} -lkleeRuntest

# Timeout in seconds of SVG tree graph creation from .dot file
SVG_CREATION_TIMEOUT=10

# LLBMC default timeout (in seconds)
LLBMC_DEFAULT_TIMEOUT=3600

# In the following, --no-max-loop-iterations-checks
# --no-max-function-call-depth-checks prevents reaching of the bounds
# as errors to avoid confusion.
#
# You may need to try to figure out the right values of:
#
# -max-loop-iterations=<m> -max-function-call-depth=<n>
#
# To figure out the right values, one can start from (m,n) = (0,0).
# Run LLBMC without using --no-max-loop-iterations-checks
# --no-max-function-call-depth-checks
#
# If they were insufficient, LLBMC will report:
#
# Loop iteration bound is not sufficient. The program analysis is thus
# not complete.
#
# OR
#
# Function call depth is not sufficient. The program analysis is thus
# not complete.
#
# Then you can try to increase the values.
LLBMC_DEFAULT_OPTIONS=--ignore-missing-function-bodies -function-name=main --no-max-loop-iterations-checks --no-max-function-call-depth-checks -max-loop-iterations=20 -max-function-call-depth=10

CC=@CC@
AS=${CC} -S

INPUT_TARGETS=$(subst .tx,.inputs,${TARGETS})
IR_TARGETS=$(subst .tx,.ll,${TARGETS})
KLEE_TARGETS=$(subst .tx,.klee,${TARGETS})
STPKLEE_TARGETS=$(subst .tx,.stpklee,${TARGETS})
EXECUTABLE_TARGETS=$(subst .tx,,${TARGETS})
TXCOV_TARGETS=$(subst .tx,.txcov,${TARGETS})
KLEECOV_TARGETS=$(subst .tx,.kleecov,${TARGETS})
STPKLEECOV_TARGETS=$(subst .tx,.stpkleecov,${TARGETS})

all: all-ir ${INPUT_TARGETS}

all-ir: ${IR_TARGETS}

all-replay: ${TXCOV_TARGETS}

standard-clean:
	rm -f klee-last *.bc *.ll *~ *.inputs *.gcno *.gcda *.cov *.stpcov core ${EXECUTABLE_TARGETS} 
	rm -rf klee-out-* ${TARGETS} ${KLEE_TARGETS} ${STPKLEE_TARGETS} ${TXCOV_TARGETS} ${KLEECOV_TARGETS} ${STPKLEECOV_TARGETS} ${EXTRA_REMOVAL}
	if [ -z "$$LLBMC_OUTPUT_DIR" ] ; then \
		LLBMC_OUTPUT_DIR="${CURDIR}/LLBMC_OUTPUT" ; \
	fi ; \
	rm -rf $$LLBMC_OUTPUT_DIR

# To prevent the removal of *.tx subdirectories
.PRECIOUS: %.csv %.tx %.klee %.stpklee

.SUFFIXES: .tx .klee .stpklee .klee-out .inputs .bc .ll .cov .txcov .kleecov .stpkleecov

# For running KLEE with Z3 and interpolation
.bc.tx:
	SOLVER_FLAGS="-solver-backend=z3" OUTPUT_DIR=$@ make $*.klee-out
	# The following is to catch any difference in subsumption
	# number for regression testing purposes
	@if [ -e subsumption.dat ]; then \
		REFERENCE_SUBSUMPTION=`grep $*.c subsumption.dat | sed 's/^[a-z0-9_\-]*\.c\t\+//' - ` ; \
		if [ x$$REFERENCE_SUBSUMPTION != x ] ; then \
			ACTUAL_SUBSUMPTION=`grep subsumed $@/tree.dot | wc -l` ; \
			if [ x$$REFERENCE_SUBSUMPTION != x$$ACTUAL_SUBSUMPTION ] ; then \
				echo ERROR: Subsumption number \($$ACTUAL_SUBSUMPTION\) disagrees with reference data for $*.c \($$REFERENCE_SUBSUMPTION\) ; \
				exit 1 ; \
			fi ; \
		fi ; \
	fi
	# The following is to catch any difference in error report
	# number for regression testing purposes
	@if [ -e error.dat ]; then \
		REFERENCE_ERROR=`grep $*.c error.dat | sed 's/^[a-z0-9_\-]*\.c\t\+//' - ` ; \
		if [ x$$REFERENCE_ERROR != x ] ; then \
			ACTUAL_ERROR=`ls $@ | grep err | wc -l` ; \
			if [ x$$REFERENCE_ERROR != x$$ACTUAL_ERROR ] ; then \
				echo ERROR: Error count \($$ACTUAL_ERROR\) disagrees with reference data for $*.c \($$REFERENCE_ERROR\) ; \
				exit 1 ; \
			fi ; \
		fi ; \
	fi

# For running KLEE with Z3 without interpolation
.bc.klee:
	SOLVER_FLAGS="-solver-backend=z3 -no-interpolation" OUTPUT_DIR=$@ make $*.klee-out

# For running KLEE with STP without interpolation. Since we run using
# STP, we do 'ulimit -s unlimited' beforehand, as recommended in
# http://klee.github.io/build-stp/
.bc.stpklee:
	ulimit -s unlimited ; \
	SOLVER_FLAGS="-solver-backend=stp" OUTPUT_DIR=$@ make $*.klee-out

.bc.klee-out:
	@LD_LIBRARY_PATH=${EXTRA_LD_LIBRARY_PATH} time ${KLEE} ${KLEE_FLAGS} $$SOLVER_FLAGS -output-dir=$$OUTPUT_DIR $< ${PROGRAM_OPTIONS}
	@opt -analyze -dot-cfg $<
	@mv *.dot $$OUTPUT_DIR
	# Create SVGs from .dot files
	@for DOTFILE in $$OUTPUT_DIR/*.dot ; do \
		SVGFILE=`echo -n $$DOTFILE | sed -e s/\.dot/\.svg/ -` ; \
		timeout ${SVG_CREATION_TIMEOUT}s dot -Tsvg $$DOTFILE -o $$SVGFILE ; \
		if [ $$? = 124 ] ; then \
			echo WARNING: Timed out creating .svg file ; \
		fi ; \
	done

# Execute the following targets instead to also get coverage
# information, e.g., make even.txcov
.bc.txcov:
	SOLVER_FLAGS="-solver-backend=z3" OUTPUT_DIR=$*.tx COV_FILE=$*.txcov make $*.cov

.bc.kleecov:
	SOLVER_FLAGS="-solver-backend=z3 -no-interpolation" OUTPUT_DIR=$*.klee COV_FILE=$*.kleecov make $*.cov

.bc.stpkleecov:
	SOLVER_FLAGS="-solver-backend=stp" OUTPUT_DIR=$*.stpklee COV_FILE=$*.stpkleecov make $*.cov

.bc.cov:
	@make $*.klee-out
	####################################################################
	# KLEE-STATS Statistics                                            #
	#                                                                  #
	# KLEE displays a low coverage using klee-stats on small examples, #
	# due to additional code added.  The additional code is displayed  #
	# in <klee_output_dir>/assembly.ll.                                #
	####################################################################
	${KLEE_STATS} $$OUTPUT_DIR
	####################################################################
	# llvm-cov Statistics for line coverage                            #
	#                                                                  #
	# See the generated .stpcov file for the detailed execution count  #
	# of each line.                                                    #
	####################################################################
	${CC} ${CFLAGS} -fprofile-arcs -ftest-coverage ${LDFLAGS} $*.c -o $*
	for KTEST in $$OUTPUT_DIR/*.ktest ; do \
		( LD_LIBRARY_PATH=${KLEE_HOME}/lib KTEST_FILE=$$KTEST KLEE_REPLAY_TIMEOUT=${DEFAULT_KLEE_REPLAY_TIMEOUT} ${KLEE_REPLAY} $* $$KTEST ) ; \
	done
	touch $$COV_FILE
	LOC_TOTAL=0 ; \
	LINE_COVERAGE=0 ; \
	if [ -e $*.gcda ] ; then \
		llvm-cov -gcno=$*.gcno -gcda=$*.gcda >> $$COV_FILE ; \
		LINE_COVERAGE=`grep '^[[:space:]]*[[:digit:]]\+' $$COV_FILE |wc -l` ; \
		LINE_NON_COVERAGE=`grep '^[[:space:]]*#####:' $$COV_FILE |wc -l` ; \
		LOC_TOTAL=`expr $$LINE_COVERAGE + $$LINE_NON_COVERAGE` ; \
	fi ; \
	echo Line coverage = $$LINE_COVERAGE of $$LOC_TOTAL

# This target is used for running experiment with LLBMC. LLBMC uses
# STP as backend, so we do 'ulimit -s unlimited' as recommended in
# http://klee.github.io/build-stp/
%.llbmc :
	( \
		if [ -z "$$LLBMC_OUTPUT_DIR" ] ; then \
			LLBMC_OUTPUT_DIR="${CURDIR}/LLBMC_OUTPUT" ; \
		fi ; \
		if [ ! -d "$$LLBMC_OUTPUT_DIR" ]; then \
			mkdir "$$LLBMC_OUTPUT_DIR"; \
		fi ; \
		${CC} -emit-llvm -DLLBMC -I../include -c ${CFLAGS} $*.c -o $*.bc ; \
		ulimit -s unlimited ; \
		if [ -z "${LLBMC_OPTIONS}" ] ; then \
			LLBMC_OPTIONS="${LLBMC_DEFAULT_OPTIONS}" ; \
		else \
			LLBMC_OPTIONS="${LLBMC_OPTIONS}" ; \
		fi ; \
		if [ -z "${EXPERIMENT_TIMEOUT}" ] ; then \
			LLBMC_TIMEOUT="${LLBMC_DEFAULT_TIMEOUT}" ; \
		else \
			LLBMC_TIMEOUT="${EXPERIMENT_TIMEOUT}" ; \
		fi ; \
		PATH="${EXTRA_PATH}:$$PATH" timeout $$LLBMC_TIMEOUT llbmc $$LLBMC_OPTIONS -smtlib2 $*.bc > "$$LLBMC_OUTPUT_DIR"/$*.smt2 ; \
		PATH="${EXTRA_PATH}:$$PATH" timeout $$LLBMC_TIMEOUT llbmc $$LLBMC_OPTIONS $*.bc > "$$LLBMC_OUTPUT_DIR"/$* ; \
		if [ $$? = "124" ] ; then \
			touch "$$LLBMC_OUTPUT_DIR"/$*.timeout ; \
		fi ; \
		rm -f $*.bc \
	)

.tx.inputs:
	for KTEST in $</*.ktest ; do \
		( ( ${KTEST_TOOL} --write-ints $$KTEST ) >> $@ ) ; \
	done

.c.ll:
	${AS} -emit-llvm ${CFLAGS} $<

.c.bc:
	${CC} -emit-llvm ${CFLAGS} -c $<

