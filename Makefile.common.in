# Makefile to build and run the examples using KLEE.
#
# Copyright 2015, 2016 National University of Singapore
#
# Environment variables that can be set externally include:
#
# EXTRA_OPTIONS   - Extra KLEE options
# PROGRAM_OPTIONS - Extra options for the tested program, e.g.,
#                   --sym-arg
# EXTRA_CFLAGS    - Extra CFLAGS options
# EXTRA_LDFLAGS   - Extra LDFLAGS options

# Extra executable path to include. This is used for building
# coreutils 6.10 as older utilites may be needed, such as Texinfo 4.13.
EXTRA_PATH=@EXTRA_PATH@

# Extra libraries that may be needed for running KLEE to be added to
# LD_LIBRARY_PATH environment variable, e.g., the path of libz3.so
EXTRA_LD_LIBRARY_PATH=@EXTRA_LD_LIBRARY_PATH@

# Where KLEE resides in the system
KLEE_HOME=@KLEE@

# Where whole-program-llvm resides in the system
WHOLE_PROGRAM_LLVM=@WLLVM@

# In the following, please select where klee and its various tools are
# located in your system
KLEE=${KLEE_HOME}/bin/klee
KLEE_STATS=${KLEE_HOME}/bin/klee-stats
KLEE_REPLAY=${KLEE_HOME}/bin/klee-replay
KTEST_TOOL=${KLEE_HOME}/bin/ktest-tool

# In the following, please select suitable include and DLL directories
CFLAGS=-g -I${KLEE_HOME}/include ${EXTRA_CFLAGS}
LDFLAGS=-L${KLEE_HOME}/lib ${EXTRA_LDFLAGS} -lkleeRuntest

CC=@CC@
AS=${CC} -S
KLEE_FLAGS=${EXTRA_OPTIONS} -search=dfs

INPUT_TARGETS=$(subst .tx,.inputs,${TARGETS})
IR_TARGETS=$(subst .tx,.ll,${TARGETS})
KLEE_TARGETS=$(subst .tx,.klee,${TARGETS})
STPKLEE_TARGETS=$(subst .tx,.stpklee,${TARGETS})
EXECUTABLE_TARGETS=$(subst .tx,,${TARGETS})
TXCOV_TARGETS=$(subst .tx,.txcov,${TARGETS})
KLEECOV_TARGETS=$(subst .tx,.kleecov,${TARGETS})
STPKLEECOV_TARGETS=$(subst .tx,.stpkleecov,${TARGETS})

all: all-ir ${INPUT_TARGETS}

all-ir: ${IR_TARGETS}

all-replay: ${TXCOV_TARGETS}

standard-clean:
	rm -f klee-last *.bc *.ll *~ *.inputs *.gcno *.gcda *.cov *.stpcov core ${EXECUTABLE_TARGETS} 
	rm -rf klee-out-* ${TARGETS} ${KLEE_TARGETS} ${STPKLEE_TARGETS} ${TXCOV_TARGETS} ${KLEECOV_TARGETS} ${STPKLEECOV_TARGETS} ${EXTRA_REMOVAL} 

# To prevent the removal of *.tx subdirectories
.PRECIOUS: %.tx %.klee %.stpklee

.SUFFIXES: .tx .klee .stpklee .inputs .bc .ll .txcov .kleecov .stpkleecov

# For running KLEE with Z3 and interpolation
.bc.tx:
	LD_LIBRARY_PATH=${EXTRA_LD_LIBRARY_PATH} time ${KLEE} ${KLEE_FLAGS} -solver-backend=z3 -output-dir=$@ $< ${PROGRAM_OPTIONS}
	opt -analyze -dot-cfg $<
	mv *.dot $@
	# Create SVGs from *.dot files
	for DOTFILE in $@/*.dot ; do \
		SVGFILE=`echo -n $$DOTFILE | sed -e s/\.dot/\.svg/ -` ; \
		dot -Tsvg $$DOTFILE -o $$SVGFILE ; \
	done
	# The following is to catch any difference in subsumption
	# number for regression testing purposes
	if [ -e subsumption.dat ]; then \
		REFERENCE_SUBSUMPTION=`grep $*.c subsumption.dat | sed 's/^[a-z0-9_]*\.c\t\+//' - ` ; \
		if [ x$$REFERENCE_SUBSUMPTION != x ] ; then \
			ACTUAL_SUBSUMPTION=`grep subsumed $@/tree.dot | wc -l` ; \
			if [ x$$REFERENCE_SUBSUMPTION != x$$ACTUAL_SUBSUMPTION ] ; then \
				echo ERROR: Subsumption number \($$ACTUAL_SUBSUMPTION\) disagrees with reference data for $*.c \($$REFERENCE_SUBSUMPTION\) ; \
				exit 1 ; \
			fi ; \
		fi ; \
	fi
	# The following is to catch any difference in error report
	# number for regression testing purposes
	if [ -e error.dat ]; then \
		REFERENCE_ERROR=`grep $*.c error.dat | sed 's/^[a-z0-9_]*\.c\t\+//' - ` ; \
		if [ x$$REFERENCE_ERROR != x ] ; then \
			ACTUAL_ERROR=`ls $@ | grep err | wc -l` ; \
			if [ x$$REFERENCE_ERROR != x$$ACTUAL_ERROR ] ; then \
				echo ERROR: Error count \($$ACTUAL_ERROR\) disagrees with reference data for $*.c \($$REFERENCE_ERROR\) ; \
				exit 1 ; \
			fi ; \
		fi ; \
	fi

# For running KLEE with Z3 without interpolation
.bc.klee:
	LD_LIBRARY_PATH=${EXTRA_LD_LIBRARY_PATH} time ${KLEE} ${KLEE_FLAGS} -solver-backend=z3 -no-interpolation -output-dir=$@ $< ${PROGRAM_OPTIONS}
	opt -analyze -dot-cfg $<
	mv *.dot $@
	# Create SVGs from .dot files
	for DOTFILE in $@/*.dot ; do \
		SVGFILE=`echo -n $$DOTFILE | sed -e s/\.dot/\.svg/ -` ; \
		dot -Tsvg $$DOTFILE -o $$SVGFILE ; \
	done

# For running KLEE with STP without interpolation
.bc.stpklee:
	LD_LIBRARY_PATH=${EXTRA_LD_LIBRARY_PATH} time ${KLEE} ${KLEE_FLAGS} -solver-backend=stp -output-dir=$@ $< ${PROGRAM_OPTIONS}
	opt -analyze -dot-cfg $<
	mv *.dot $@
	# Create SVGs from .dot files
	for DOTFILE in $@/*.dot ; do \
		SVGFILE=`echo -n $$DOTFILE | sed -e s/\.dot/\.svg/ -` ; \
		dot -Tsvg $$DOTFILE -o $$SVGFILE ; \
	done

# For replaying the tests and getting coverage information for the tests run
.tx.txcov:
	####################################################################
	# KLEE-STATS Statistics                                            #
	#                                                                  #
	# KLEE displays a low coverage using klee-stats on small examples, #
	# due to additional code added.  The additional code is displayed  #
	# in <klee_output_dir>/assembly.ll.                                #
	####################################################################
	${KLEE_STATS} $<
	####################################################################
	# llvm-cov Statistics for line coverage                            #
	#                                                                  #
	# See the generated .cov file for the detailed execution count of  #
	# each line.                                                       #
	####################################################################
	${CC} ${CFLAGS} -fprofile-arcs -ftest-coverage ${LDFLAGS} $*.c -o $*
	for KTEST in $</*.ktest ; do \
		( LD_LIBRARY_PATH=${KLEE_HOME}/lib KTEST_FILE=$$KTEST ${KLEE_REPLAY} $* $$KTEST ) ; \
	done
	touch $@
	LOC_TOTAL=0 ; \
	LINE_COVERAGE=0 ; \
	if [ -e $*.gcda ] ; then \
		llvm-cov -gcno=$*.gcno -gcda=$*.gcda >> $@ ; \
		LINE_COVERAGE=`grep '^[[:space:]]*[[:digit:]]\+' $@ |wc -l` ; \
		LINE_NON_COVERAGE=`grep '^[[:space:]]*#####:' $@ |wc -l` ; \
		LOC_TOTAL=`expr $$LINE_COVERAGE + $$LINE_NON_COVERAGE` ; \
	fi ; \
	echo Line coverage = $$LINE_COVERAGE of $$LOC_TOTAL

.klee.kleecov:
	####################################################################
	# KLEE-STATS Statistics                                            #
	#                                                                  #
	# KLEE displays a low coverage using klee-stats on small examples, #
	# due to additional code added.  The additional code is displayed  #
	# in <klee_output_dir>/assembly.ll.                                #
	####################################################################
	${KLEE_STATS} $<
	####################################################################
	# llvm-cov Statistics for line coverage                            #
	#                                                                  #
	# See the generated .cov file for the detailed execution count of  #
	# each line.                                                       #
	####################################################################
	${CC} ${CFLAGS} -fprofile-arcs -ftest-coverage ${LDFLAGS} $*.c -o $*
	for KTEST in $</*.ktest ; do \
		( LD_LIBRARY_PATH=${KLEE_HOME}/lib KTEST_FILE=$$KTEST ${KLEE_REPLAY} $* $$KTEST ) ; \
	done
	touch $@
	LOC_TOTAL=0 ; \
	LINE_COVERAGE=0 ; \
	if [ -e $*.gcda ] ; then \
		llvm-cov -gcno=$*.gcno -gcda=$*.gcda >> $@ ; \
		LINE_COVERAGE=`grep '^[[:space:]]*[[:digit:]]\+' $@ |wc -l` ; \
		LINE_NON_COVERAGE=`grep '^[[:space:]]*#####:' $@ |wc -l` ; \
		LOC_TOTAL=`expr $$LINE_COVERAGE + $$LINE_NON_COVERAGE` ; \
	fi ; \
	echo Line coverage = $$LINE_COVERAGE of $$LOC_TOTAL

.stpklee.stpkleecov:
	####################################################################
	# KLEE-STATS Statistics                                            #
	#                                                                  #
	# KLEE displays a low coverage using klee-stats on small examples, #
	# due to additional code added.  The additional code is displayed  #
	# in <klee_output_dir>/assembly.ll.                                #
	####################################################################
	${KLEE_STATS} $<
	####################################################################
	# llvm-cov Statistics for line coverage                            #
	#                                                                  #
	# See the generated .stpcov file for the detailed execution count  #
	# of each line.                                                    #
	####################################################################
	${CC} ${CFLAGS} -fprofile-arcs -ftest-coverage ${LDFLAGS} $*.c -o $*
	for KTEST in $</*.ktest ; do \
		( LD_LIBRARY_PATH=${KLEE_HOME}/lib KTEST_FILE=$$KTEST ${KLEE_REPLAY} $* $$KTEST ) ; \
	done
	touch $@ 
	LOC_TOTAL=0 ; \
	LINE_COVERAGE=0 ; \
	if [ -e $*.gcda ] ; then \
		llvm-cov -gcno=$*.gcno -gcda=$*.gcda >> $@ ; \
		LINE_COVERAGE=`grep '^[[:space:]]*[[:digit:]]\+' $@ |wc -l` ; \
		LINE_NON_COVERAGE=`grep '^[[:space:]]*#####:' $@ |wc -l` ; \
		LOC_TOTAL=`expr $$LINE_COVERAGE + $$LINE_NON_COVERAGE` ; \
	fi ; \
	echo Line coverage = $$LINE_COVERAGE of $$LOC_TOTAL

.tx.inputs:
	for KTEST in $</*.ktest ; do \
		( ( ${KTEST_TOOL} --write-ints $$KTEST ) >> $@ ) ; \
	done

.c.ll:
	${AS} -emit-llvm ${CFLAGS} $<

.c.bc:
	${CC} -emit-llvm ${CFLAGS} -c $<

