# Makefile to build and run the examples using KLEE.
#
# Copyright 2015, 2016 National University of Singapore

# Extra executable path to include. This is used for building
# coreutils 6.10 as older utilites may be needed, such as Texinfo 4.13.
EXTRA_PATH=
#EXTRA_PATH=${HOME}/software/alt/bin

# Extra libraries that may be needed for running KLEE to be added to
# LD_LIBRARY_PATH environment variable, e.g., the path of libz3.so
EXTRA_LD_LIB=
#EXTRA_LD_LIB=${HOME}/software/lib:${HOME}/software/stp-2.1.0/build/lib

# Where KLEE resides in the system
KLEE_HOME=/usr/local/lib/tracerx
#KLEE_HOME=${HOME}/git/tracerx/klee/Release+Asserts
#KLEE_HOME=${HOME}/software/klee/Release+Asserts

# Where whole-program-llvm resides in the system
WHOLE_PROGRAM_LLVM=/usr/local/lib/whole-program-llvm
#WHOLE_PROGRAM_LLVM=${HOME}/whole-program-llvm
#WHOLE_PROGRAM_LLVM=${HOME}/software/whole-program-llvm

# In the following, please select where klee and its various tools are
# located in your system
KLEE=${KLEE_HOME}/bin/klee
KLEE_STATS=${KLEE_HOME}/bin/klee-stats
KLEE_REPLAY=${KLEE_HOME}/bin/klee-replay
KTEST_TOOL=${KLEE_HOME}/bin/ktest-tool

# In the following, please select suitable include and DLL directories
CFLAGS=-g -I${KLEE_HOME}/include
LDFLAGS=-L${KLEE_HOME}/lib -lkleeRuntest

CC=clang
AS=${CC} -S
KLEE_FLAGS=${EXTRA_OPTIONS} -search=dfs

INPUT_TARGETS=$(subst .klee,.inputs,${TARGETS})
IR_TARGETS=$(subst .klee,.ll,${TARGETS})
STPKLEE_TARGETS=$(subst .klee,.stpklee,${TARGETS})
EXECUTABLE_TARGETS=$(subst .klee,,${TARGETS})
COV_TARGETS=$(subst .klee,.cov,${TARGETS})

all: all-ir ${INPUT_TARGETS}

all-ir: ${IR_TARGETS}

all-replay: ${COV_TARGETS}

standard-clean:
	rm -f klee-last *.bc *.ll *~ *.inputs *.gcno *.gcda *.cov *.stpcov core ${EXECUTABLE_TARGETS} 
	rm -rf klee-out-* ${TARGETS} ${STPKLEE_TARGETS} ${EXTRA_REMOVAL} 

# To prevent the removal of *.klee subdirectories
.PRECIOUS: %.klee %.stpklee

.SUFFIXES: .klee .stpklee .inputs .bc .ll .cov .stpcov

# For running KLEE with Z3 and interpolation
.bc.klee:
	time ${KLEE} ${KLEE_FLAGS} -output-dir=$@ $<
	opt -analyze -dot-cfg $<
	mv *.dot $@
	# Create SVGs from *.dot files
	for DOTFILE in $@/*.dot ; do \
		SVGFILE=`echo -n $$DOTFILE | sed -e s/\.dot/\.svg/ -` ; \
		dot -Tsvg $$DOTFILE -o $$SVGFILE ; \
	done

# For running KLEE with STP without interpolation
.bc.stpklee:
	time ${KLEE} ${KLEE_FLAGS} -select-solver=stp -output-dir=$@ $<
	opt -analyze -dot-cfg $<
	mv *.dot $@
	# Create SVGs from .dot files
	for DOTFILE in $@/*.dot ; do \
		SVGFILE=`echo -n $$DOTFILE | sed -e s/\.dot/\.svg/ -` ; \
		dot -Tsvg $$DOTFILE -o $$SVGFILE ; \
	done

# For replaying the tests and getting coverage information for the tests run
.klee.cov:
	####################################################################
	# KLEE-STATS Statistics                                            #
	#                                                                  #
	# KLEE displays a low coverage using klee-stats on small examples, #
	# due to additional code added.  The additional code is displayed  #
	# in <klee_output_dir>/assembly.ll.                                #
	####################################################################
	${KLEE_STATS} $<
	####################################################################
	# llvm-cov Statistics for line coverage                            #
	#                                                                  #
	# See the generated .cov file for the detailed execution count of  #
	# each line.                                                       #
	####################################################################
	${CC} ${CFLAGS} -fprofile-arcs -ftest-coverage ${LDFLAGS} $(subst .klee,.c,$<) -o $(subst .klee,,$<)
	for KTEST in $</*.ktest ; do \
		( LD_LIBRARY_PATH=${KLEE_HOME}/lib KTEST_FILE=$$KTEST ${KLEE_REPLAY} $(subst .klee,,$<) $$KTEST ) ; \
	done	
	llvm-cov -gcno=$(subst .klee,.gcno,$<) -gcda=$(subst .klee,.gcda,$<) > $@
	echo Line coverage = `grep '^[[:space:]]*[[:digit:]]\+' $@ |wc -l` of `sloccount $(subst .klee,.c,$<) |grep "Total Physical" | sed s/^[[:alpha:],[:space:],\(,\),\=]*//`

.stpklee.stpcov:
	####################################################################
	# KLEE-STATS Statistics                                            #
	#                                                                  #
	# KLEE displays a low coverage using klee-stats on small examples, #
	# due to additional code added.  The additional code is displayed  #
	# in <klee_output_dir>/assembly.ll.                                #
	####################################################################
	${KLEE_STATS} $<
	####################################################################
	# llvm-cov Statistics for line coverage                            #
	#                                                                  #
	# See the generated .stpcov file for the detailed execution count  #
	# of each line.                                                    #
	####################################################################
	${CC} ${CFLAGS} -fprofile-arcs -ftest-coverage ${LDFLAGS} $(subst .stpklee,.c,$<) -o $(subst .stpklee,,$<)
	for KTEST in $</*.ktest ; do \
		( LD_LIBRARY_PATH=${KLEE_HOME}/lib KTEST_FILE=$$KTEST ${KLEE_REPLAY} $(subst .stpklee,,$<) $$KTEST ) ; \
	done	
	llvm-cov -gcno=$(subst .stpklee,.gcno,$<) -gcda=$(subst .stpklee,.gcda,$<) > $@
	echo Line coverage = `grep '^[[:space:]]*[[:digit:]]\+' $@ |wc -l` of `sloccount $(subst .stpklee,.c,$<) |grep "Total Physical" | sed s/^[[:alpha:],[:space:],\(,\),\=]*//`

.klee.inputs:
	for KTEST in $</*.ktest ; do \
		( ( ${KTEST_TOOL} --write-ints $$KTEST ) >> $@ ) ; \
	done

.c.ll:
	${AS} -emit-llvm ${CFLAGS} $<

.c.bc:
	${CC} -emit-llvm ${CFLAGS} -c $<

